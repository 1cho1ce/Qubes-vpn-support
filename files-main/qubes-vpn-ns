#!/bin/bash

###########################################################################
##  qubes-vpn-ns
##
## Handles DHCP-source DNS addresses & link notification for Qubes VPN VMs.
## To use, set as 'up' and 'down' script with parameter in your VPN config.
##
## Use 'vpn_dns' environment var as override/alternative.
## In openvpn config, format is: setenv vpn_dns 'X.X.X.X  Y.Y.Y.Y [...]'
##
## Christopher Laprise, 2018-2020  -  https://github.com/tasket

set -e
export PATH="$PATH:/usr/sbin:/sbin:/bin"
nspath=/var/run/qubes/qubes-vpn-ns
rm -f $nspath
hostname=$(hostname)

do_notify() {
    if [ ! -e /etc/fedora-release-NONE ]; then
        echo \'"sleep 2; notify-send \"$hostname: $1\"" --icon=$2\' | xargs su - user -c &
    fi
}


case "$1" in
up|test-up)
    rm -f $nspath
    if [[ -z "$vpn_dns" ]] ; then
        # Parses DHCP option variables to set DNS address translation:
        for optionname in ${!foreign_option_*} ; do
            option="${!optionname}"
            unset fops; fops=($option)
            if [ ${fops[1]} == "DNS" ] ; then vpn_dns="${fops[2]} $vpn_dns" ; fi
        done
    fi

;;&
up)
    if [[ -n "$vpn_dns" ]] ; then
        # Set DNS address translation in firewall:
        echo "$vpn_dns " >$nspath
        echo "Using DNS servers $vpn_dns"
        nft flush chain ip qubes dnat-dns
        # ip6 qubes dnat-dns chain is missing upstream so fix it here for now
        nft add chain ip6 qubes dnat-dns '{ type nat hook prerouting priority dstnat; policy accept; }'
        nft flush chain ip6 qubes dnat-dns
        . /var/run/qubes/qubes-ns
        for NS in $NS1 $NS2; do
            if [[ $NS =~ .*\..* ]] ; then
                for DNS in $vpn_dns; do
                    if [[ $DNS =~ .*\..* ]] ; then
                        nft add rule ip qubes dnat-dns iifgroup 2 ip daddr $NS tcp dport 53 dnat to $DNS
                        nft add rule ip qubes dnat-dns iifgroup 2 ip daddr $NS udp dport 53 dnat to $DNS
                        break
                    fi
                done
            else
                for DNS in $vpn_dns; do
                    if [[ $DNS =~ .*:.* ]] ; then
                        nft add rule ip6 qubes dnat-dns iifgroup 2 ip6 daddr $NS tcp dport 53 dnat to $DNS
                        nft add rule ip6 qubes dnat-dns iifgroup 2 ip6 daddr $NS udp dport 53 dnat to $DNS
                        break
                    fi
                done
            fi
        done
        # Add fallback rules if no DNS is present in $NS1 and $NS2
        # Also to redirect all DNS queries to VPN DNS to prevent DNS leaks
        # This may cause troubles if user want to use some specific
        # DNS server but it'll redirect queries to VPN DNS instead
        dns_ipv4_found=0
        dns_ipv6_found=0
        for NS in $NS1 $NS2; do
            if [[ $dns_ipv4_found == 0 ]] && [[ $NS =~ .*\..* ]] ; then
                for DNS in $vpn_dns; do
                    if [[ $DNS =~ .*\..* ]] ; then
                        nft add rule ip qubes dnat-dns iifgroup 2 tcp dport 53 dnat to $DNS
                        nft add rule ip qubes dnat-dns iifgroup 2 udp dport 53 dnat to $DNS
                        dns_ipv4_found=1
                        break
                    fi
                done
            elif [[ $dns_ipv6_found == 0 ]] && [[ $NS =~ .*:.* ]] ; then
                for DNS in $vpn_dns; do
                    if [[ $DNS =~ .*:.* ]] ; then
                        nft add rule ip6 qubes dnat-dns iifgroup 2 tcp dport 53 dnat to $DNS
                        nft add rule ip6 qubes dnat-dns iifgroup 2 udp dport 53 dnat to $DNS
                        dns_ipv6_found=1
                        break
                    fi
                done
            fi
        done
        do_notify "LINK IS UP." "network-idle"
    else
        do_notify "LINK UP, NO DNS!" "dialog-error"
    fi

;;
test-up)

##  Use test-up parameter to test your basic VPN link before enabling firewall script.
##  Do NOT use beyond testing period.
    if [[ -z "$vpn_dns" ]]; then echo "NO DNS ADDRESS FOUND."; exit 0; fi
    [ -e /etc/resolv.vpnbak ] || cp -a /etc/resolv.conf /etc/resolv.vpnbak
    rm /etc/resolv.conf
    for DNS in $vpn_dns; do
        echo "nameserver $DNS" >>/etc/resolv.conf
    done
    /usr/lib/qubes/qubes-setup-dnat-to-ns
    do_notify "TEST LINK IS UP." "network-idle"

;;
down)
    nft flush chain ip qubes dnat-dns
    nft flush chain ip6 qubes dnat-dns
    do_notify "LINK IS DOWN !" "dialog-error"

;;
esac
