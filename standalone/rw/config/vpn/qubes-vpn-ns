#!/bin/bash

###########################################################################
##  qubes-vpn-ns
##
## Handles DHCP-source DNS addresses & link notification for Qubes VPN VMs.
## To use, set as 'up' and 'down' script with parameter in your VPN config.
##
## Use 'vpn_dns' environment var as override/alternative.
## In openvpn config, format is: setenv vpn_dns 'X.X.X.X  Y.Y.Y.Y [...]'

set -e
export PATH="$PATH:/usr/sbin:/sbin"
nspath=/var/run/qubes/qubes-vpn-ns

case "$1" in
'test-up')

##  Use test-up parameter to test your basic VPN link before enabling firewall script
##  (do NOT use beyond testing period). Type-in your nameserver address:
    cp -a /etc/resolv.conf /etc/resolv.vpnbak
    echo "nameserver TYPE-YOUR-DNS-ADDRESS-HERE" >/etc/resolv.conf
    /usr/lib/qubes/qubes-setup-dnat-to-ns
    su - -c 'notify-send "$(hostname): LINK IS UP." --icon=network-idle' user
    exit 0

;;
up)
    rm $nspath
    if [[ -z "$vpn_dns" ]] ; then
        # Parses DHCP option variables to set DNS address translation:
        for optionname in ${!foreign_option_*} ; do
            option="${!optionname}"
            unset fops; fops=($option)
            if [ ${fops[1]} == "DNS" ] ; then vpn_dns="$vpn_dns ${fops[2]}" ; fi
        done
    fi
    if [[ -n "$vpn_dns" ]] ; then
        # Set DNS address translation in firewall:
        echo "$vpn_dns " >$nspath
        echo "Using DNS servers $vpn_dns"
        systemctl restart qubes-firewall
        su - -c 'notify-send "$(hostname): LINK IS UP." --icon=network-idle' user
    else
        su - -c 'notify-send "$(hostname): LINK UP, NO DNS!" --icon=dialog-error' user
    fi

    ;;
down)
    iptables -t nat -F PR-QBS
    su - -c 'notify-send "$(hostname): LINK IS DOWN !" --icon=dialog-error' user

    ;;
esac
